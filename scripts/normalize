#!/usr/bin/env python

import argparse
import filters.py
import pandas as pd


hp = {
		"filters" 	: [],
		"source"	: None,
		"target"	: None
	}


# Helper function: loads a text file to a string.
def loadRawData( filename ):
	"""
		Procedure for loading an UTF-8 text file
	"""
	try:
		with open(filename, 'r', encoding='UTF8') as fp:
			data = fp.read()
	except IOError as e:
		print(e)
	finally:
		fp.close()
	return data



# Helper function: writes a text string to file.
#def writeRawData(filename, data):
#		"""
#			Procedure for writing to an UTF-8 text file
#		"""
#		try:
#			with open(filename, 'w', encoding='UTF8') as fp:
#				fp.write(data)
#		except IOError as e:
#				print(e)
#		finally:
#			fp.close()


parser = argparse.ArgumentParser(description='Applies text normalization filters in the order in which filters are specified to the target text file.')

parser.add_argument('-rmcc', nargs='?', default=-1, type=int, help='Replace unicode control characters [ \\t\\n\\r\\f\\v] with a single white space.')
parser.add_argument('-rmpc', nargs='?', default=-1, type=int, help='Replace punctuation characters [!"#$%%&\'()*+, -./:;<=>?@[\]^_`{|}~]')
parser.add_argument('-rmnc', nargs='?', default=-1, type=int, help='Remove numeric characters [0-9]')
parser.add_argument('-rmsc', nargs='?', default=-1, type=int, help='Remove special characters except: a-zA-Z0-9 áéíóúÁÉÍÓÚâêîôÂÊÎÔãõÃÕçÇ:')
parser.add_argument('-ttlc', nargs='?', default=-1, type=int, help='Transform strings to lower case')
parser.add_argument('-regex', nargs='?', default=-1, type=int, help='Label string patterns that match regular expressions')
parser.add_argument('-s', nargs='?', default=None, type=str, help='The source text file')
parser.add_argument('-t', nargs='?', default=None, type=str, help='The target filtered text file')

args = vars(parser.parse_args())

# Extract switches and sort them 
switches = dict(list(args.items())[:6])
switches = {k:v for k, v in sorted(switches.items(), key=lambda v: int(v[1]))}

# Extract source and target file name and location
source = args['s']
target = args['t']

if (source == None or target == None):
     print("source and/or target files not specified")
     exit(0);

# data loading phase
pdf = pd.DataFrame()
pdf["data"] = loadRawData( source )

# filter creation phase
filters = dict()
filter_factory = FilterFactory()
for filter_name in hp["filters"]:
    filters[filter_name] = filter_factory.create(filter_name)

# Data normalization phase
#df = pd.DataFrame()

# Storage phase 
#writeRawData()
