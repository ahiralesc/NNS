#!/usr/bin/env python

import argparse
import pandas as pd
import os
from normalization import FilterFactory, loadRawData, writeRawData


hp = {
		"filters" 	: [],
		"source"	: None,
		"target"	: None
	}


parser = argparse.ArgumentParser(description='Applies text normalization filters in the order in which filters are specified to the target text file.')

parser.add_argument('-rmcc', nargs='?', default=-1, type=int, help='Replace unicode control characters [ \\t\\n\\r\\f\\v] with a single white space.')
parser.add_argument('-rmpc', nargs='?', default=-1, type=int, help='Replace punctuation characters [!"#$%%&\'()*+, -./:;<=>?@[\]^_`{|}~]')
parser.add_argument('-rmnc', nargs='?', default=-1, type=int, help='Remove numeric characters [0-9]')
parser.add_argument('-rmsc', nargs='?', default=-1, type=int, help='Remove special characters except: a-zA-Z0-9 áéíóúÁÉÍÓÚâêîôÂÊÎÔãõÃÕçÇ:')
parser.add_argument('-ttlc', nargs='?', default=-1, type=int, help='Transform strings to lower case')
parser.add_argument('-regex', nargs='?', default=-1, type=int, help='Label string patterns that match regular expressions')
parser.add_argument('-s', nargs='?', default=None, type=str, help='The source text file')
parser.add_argument('-t', nargs='?', default=None, type=str, help='The target filtered text file')

args = vars(parser.parse_args())

# Extract switches and sort them 
switches = dict(list(args.items())[:6])
switches = {k:v for k, v in sorted(switches.items(), key=lambda v: int(v[1]))}

for k, v in switches.items():
	if v != -1:
		hp["filters"].append(k)


# Extract source and target file name and location
source = args['s']
target = args['t']

if (source == None or target == None):
     print("source and/or target files not specified")
     exit(0);


# Get the list of text files
files = dict()
files = os.listdir( target + "*.txt")


# data loading phase
pdf = pd.DataFrame( data = { 'data': [ loadRawData(source) ] }, index=[0] )


# filter creation phase
filters = dict()
filter_factory = FilterFactory()
for name in hp["filters"]:
    filters[name] = filter_factory.create(name)


# Data normalization phase
for _name, _filter in filters.items():
	pdf = _filter.apply(pdf,"data")


# Storage phase 
writeRawData( target, pdf.loc[0,'data'] )
