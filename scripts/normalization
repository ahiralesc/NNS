#!/usr/bin/env python

import argparse
import filters


hp = {
		"filters" 	: [],
		"source"	: None,
		"target"	: None
	}


# Helper function: loads a text file to a string.
#def loadRawData( filename ):
#	"""
#		Procedure for loading an UTF-8 text file
#	"""
#	try:
#		with open(filename, 'r', encoding='UTF8') as fp:
#			data = fp.read()
#		except IOError as e:
#			print(e)
#		finally:
#			fp.close()
#		return data



# Helper function: writes a text string to file.
#def writeRawData(filename, data):
#		"""
#			Procedure for writing to an UTF-8 text file
#		"""
#		try:
#			with open(filename, 'w', encoding='UTF8') as fp:
#				fp.write(data)
#		except IOError as e:
#				print(e)
#		finally:
#			fp.close()


parser = argparse.ArgumentParser(description='Applies text normalization filters in the order in which filters are specified to the target text file.')

parser.add_argument('-rmcc', nargs='?', default=-1, help='Replace unicode control characters [ \\t\\n\\r\\f\\v] with a single white space.')
parser.add_argument('-rmpc', nargs='?', default=-1, help='Replace punctuation characters [!"#$%%&\'()*+, -./:;<=>?@[\]^_`{|}~]')
parser.add_argument('-rmnc', nargs='?', default=-1, help='Remove numeric characters [0-9]')
parser.add_argument('-rmsc', nargs='?', default=-1, help='Remove special characters except: a-zA-Z0-9 áéíóúÁÉÍÓÚâêîôÂÊÎÔãõÃÕçÇ:')
parser.add_argument('-ttlc', nargs='?', default=-1, help='Transform strings to lower case')
parser.add_argument('-regex', nargs='?', default=-1, help='Label string patterns that match regular expressions')

args = vars(parser.parse_args())

# sort the switches in increasing order of values
args = {k:v for k, v in sorted(args.items(), key=lambda v: int(v[1]) if isinstance(v[1],str) else v[1])}

# create the list of filters to apply
for key, value in args.items():
	if value != -1:
		hp["filters"].append(key)


# Loading phase
data = loadRawData( filename )

# Data normalization phase
df = pd.DataFrame()

# Storage phase 
writeRawData()
